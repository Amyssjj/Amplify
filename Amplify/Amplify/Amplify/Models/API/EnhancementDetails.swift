//
// EnhancementDetails.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct EnhancementDetails: Codable, JSONEncodable, Hashable {

    public enum AudioStatus: String, Codable, CaseIterable {
        case notGenerated = "not_generated"
        case ready = "ready"
    }
    public var enhancementId: String
    public var createdAt: Date
    public var originalTranscript: String
    public var enhancedTranscript: String
    public var insights: [String: String]
    /** Indicates if the audio is available to be played or fetched again. */
    public var audioStatus: AudioStatus
    /** Original photo data, sent on-demand for display purposes. */
    public var photoBase64: Data?

    public init(enhancementId: String, createdAt: Date, originalTranscript: String, enhancedTranscript: String, insights: [String: String], audioStatus: AudioStatus, photoBase64: Data? = nil) {
        self.enhancementId = enhancementId
        self.createdAt = createdAt
        self.originalTranscript = originalTranscript
        self.enhancedTranscript = enhancedTranscript
        self.insights = insights
        self.audioStatus = audioStatus
        self.photoBase64 = photoBase64
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case enhancementId = "enhancement_id"
        case createdAt = "created_at"
        case originalTranscript = "original_transcript"
        case enhancedTranscript = "enhanced_transcript"
        case insights
        case audioStatus = "audio_status"
        case photoBase64 = "photo_base64"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(enhancementId, forKey: .enhancementId)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(originalTranscript, forKey: .originalTranscript)
        try container.encode(enhancedTranscript, forKey: .enhancedTranscript)
        try container.encode(insights, forKey: .insights)
        try container.encode(audioStatus, forKey: .audioStatus)
        try container.encodeIfPresent(photoBase64, forKey: .photoBase64)
    }
}

